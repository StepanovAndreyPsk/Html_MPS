package jetbrains.task.html.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ATag;
  private ConceptPresentation props_BaseAttribute;
  private ConceptPresentation props_BaseTag;
  private ConceptPresentation props_ClassAttribute;
  private ConceptPresentation props_DivTag;
  private ConceptPresentation props_H1;
  private ConceptPresentation props_H2;
  private ConceptPresentation props_H3;
  private ConceptPresentation props_HtmlPage;
  private ConceptPresentation props_ImgTag;
  private ConceptPresentation props_OList;
  private ConceptPresentation props_OListItem;
  private ConceptPresentation props_PTag;
  private ConceptPresentation props_SpanTag;
  private ConceptPresentation props_TagGroup;
  private ConceptPresentation props_Text;
  private ConceptPresentation props_UList;
  private ConceptPresentation props_UListItem;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ATag:
        if (props_ATag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("link");
          props_ATag = cpb.create();
        }
        return props_ATag;
      case LanguageConceptSwitch.BaseAttribute:
        if (props_BaseAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseAttribute = cpb.create();
        }
        return props_BaseAttribute;
      case LanguageConceptSwitch.BaseTag:
        if (props_BaseTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("abstract tag");
          props_BaseTag = cpb.create();
        }
        return props_BaseTag;
      case LanguageConceptSwitch.ClassAttribute:
        if (props_ClassAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("class");
          props_ClassAttribute = cpb.create();
        }
        return props_ClassAttribute;
      case LanguageConceptSwitch.DivTag:
        if (props_DivTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("div");
          props_DivTag = cpb.create();
        }
        return props_DivTag;
      case LanguageConceptSwitch.H1:
        if (props_H1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("# ");
          props_H1 = cpb.create();
        }
        return props_H1;
      case LanguageConceptSwitch.H2:
        if (props_H2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("## ");
          props_H2 = cpb.create();
        }
        return props_H2;
      case LanguageConceptSwitch.H3:
        if (props_H3 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("### ");
          props_H3 = cpb.create();
        }
        return props_H3;
      case LanguageConceptSwitch.HtmlPage:
        if (props_HtmlPage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HtmlPage = cpb.create();
        }
        return props_HtmlPage;
      case LanguageConceptSwitch.ImgTag:
        if (props_ImgTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("img");
          props_ImgTag = cpb.create();
        }
        return props_ImgTag;
      case LanguageConceptSwitch.OList:
        if (props_OList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("oredered list");
          props_OList = cpb.create();
        }
        return props_OList;
      case LanguageConceptSwitch.OListItem:
        if (props_OListItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OListItem");
          props_OListItem = cpb.create();
        }
        return props_OListItem;
      case LanguageConceptSwitch.PTag:
        if (props_PTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paragraph");
          props_PTag = cpb.create();
        }
        return props_PTag;
      case LanguageConceptSwitch.SpanTag:
        if (props_SpanTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("span");
          props_SpanTag = cpb.create();
        }
        return props_SpanTag;
      case LanguageConceptSwitch.TagGroup:
        if (props_TagGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TagGroup");
          props_TagGroup = cpb.create();
        }
        return props_TagGroup;
      case LanguageConceptSwitch.Text:
        if (props_Text == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Text");
          props_Text = cpb.create();
        }
        return props_Text;
      case LanguageConceptSwitch.UList:
        if (props_UList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("unordered list");
          props_UList = cpb.create();
        }
        return props_UList;
      case LanguageConceptSwitch.UListItem:
        if (props_UListItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("* ");
          props_UListItem = cpb.create();
        }
        return props_UListItem;
    }
    return null;
  }
}
