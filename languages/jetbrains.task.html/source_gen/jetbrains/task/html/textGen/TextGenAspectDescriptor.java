package jetbrains.task.html.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import jetbrains.task.html.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.charset.Charset;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ATag:
        return new ATag_TextGen();
      case LanguageConceptSwitch.DivTag:
        return new DivTag_TextGen();
      case LanguageConceptSwitch.H1:
        return new H1_TextGen();
      case LanguageConceptSwitch.H2:
        return new H2_TextGen();
      case LanguageConceptSwitch.H3:
        return new H3_TextGen();
      case LanguageConceptSwitch.HtmlPage:
        return new HtmlPage_TextGen();
      case LanguageConceptSwitch.ImgTag:
        return new ImgTag_TextGen();
      case LanguageConceptSwitch.OList:
        return new OList_TextGen();
      case LanguageConceptSwitch.OListItem:
        return new OListItem_TextGen();
      case LanguageConceptSwitch.PTag:
        return new PTag_TextGen();
      case LanguageConceptSwitch.SpanTag:
        return new SpanTag_TextGen();
      case LanguageConceptSwitch.TagGroup:
        return new TagGroup_TextGen();
      case LanguageConceptSwitch.Text:
        return new Text_TextGen();
      case LanguageConceptSwitch.UList:
        return new UList_TextGen();
      case LanguageConceptSwitch.UListItem:
        return new UListItem_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.HtmlPage$2p)) {
        String fname = getFileName_HtmlPage(root);
        String ext = getFileExtension_HtmlPage(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), Charset.forName(getEncoding_HtmlPage()), root);
        continue;
      }
    }
  }
  private static String getFileName_HtmlPage(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileExtension_HtmlPage(SNode node) {
    return "html";
  }
  private static String getEncoding_HtmlPage() {
    return "UTF-8";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HtmlPage$2p = MetaAdapterFactory.getConcept(0xe3ef414942a74e42L, 0x8bc2f96cb576bf56L, 0x4318f1c33ebd2396L, "jetbrains.task.html.structure.HtmlPage");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
